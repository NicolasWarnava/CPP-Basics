/*Abra um arquivo no formato txt contendo um texto. Analise o conteúdo e gere o seguinte relatório (na tela) . O nome do arquivo é fixo no código.
Quantidade de caracteres espaço.
Quantidade de linhas do texto.
Quantidade de vogais.
Quantidade de artigos definidos.*/
//concluido
//2-Modifique o exercício 1, para permitir que o usuário escolha o arquivo a ser analisado.



#include <iostream>
#include <fstream>
#include <cstdlib>
#include <iomanip>
#include <string>
#include <locale>

using namespace std;

/*
Modos de abertura Descrição
ios::in Abre para leitura (default de ifstream).
ios::out Abre para gravação (default de ofstream),
ios::ate Abre e posiciona no final do arquivo.
(Este modo trabalha com leitura e gravação)
ios::app Grava a partir do fim do arquivo
ios::trunc Abre e apaga todo o conteúdo do arquivo
ios::nocreate Erro de abertura se o arquivo não existe
ios::noreplace Erro de abertura se o arquivo existir
ios::binary Abre em binário (default é texto)
*/

int main()
{


  ifstream ler; // inFile é o arquivo de leitura dos dados

  setlocale(LC_ALL,"");//seleciona linguagem

  string palavra;
  string title;
  char caractere;
  int Nstring=0;
  int Nlinhas=0;
  int Nvogais=0;
  int Nspaces=0;
  int Ndef_art=0;
  int Nva=0,Nve=0,Nvi=0,Nvo=0,Nvu=0,NvA=0,NvE=0,NvI=0,NvO=0,NvU=0;

  char linha[200];
  cout<<"digite o titulo do arquivo .txt"<<endl;
   //cin.get(title);
  getline(cin, title);

  ler.open(title, ios::in); // abre o arquivo para leitura

  if (! ler)
     { cerr << "Arquivo saida.txt nao pode ser aberto" << endl;
      return -1;
     }
ler.open(title, ios::in);
while(ler.get(caractere)){
    if(caractere == 'a'){
        Nva++;
    }
}
ler.close();

ler.open(title, ios::in);
while(ler.get(caractere)){
    if(caractere == 'e'){
        Nve++;
    }
}ler.close();

ler.open(title, ios::in);
while(ler.get(caractere)){
    if(caractere == 'i'){
        Nvi++;
    }
}
ler.close();

ler.open(title, ios::in);
while(ler.get(caractere)){
    if(caractere == 'o'){
        Nvo++;
    }
}
ler.close();

ler.open(title, ios::in);
while(ler.get(caractere)){
    if(caractere == 'u'){
        Nvu++;
    }
}
ler.close();

ler.open(title, ios::in);
while(ler.get(caractere)){
    if(caractere == 'A'){
        NvA++;
    }
}
ler.close();

ler.open(title, ios::in);
while(ler.get(caractere)){
    if(caractere == 'E'){
        NvE++;
    }
}ler.close();

ler.open(title, ios::in);
while(ler.get(caractere)){
    if(caractere == 'I'){
        NvI++;
    }
}
ler.close();

ler.open(title, ios::in);
while(ler.get(caractere)){
    if(caractere == 'O'){
        NvO++;
    }
}
ler.close();

ler.open(title, ios::in);
while(ler.get(caractere)){
    if(caractere == 'U'){
        NvU++;
    }
}
ler.close();

ler.open(title, ios::in);
while(ler.get(caractere)){
    if(caractere == ' '){
        Nspaces++;
    }
}
ler.close();

ler.open(title, ios::in);
while(ler >> palavra){
    Nstring = Nstring + 1;
}
ler.close();

ler.open(title, ios::in);
while(ler.getline(linha,200)){
    Nlinhas = Nlinhas + 1;
}
ler.close();

ler.open(title, ios::in);
while(ler.get(caractere)){
    if(caractere == 'a'||'o'||'as'||'os'){
        Ndef_art++;
    }
}
Nvogais=Nva+Nve+Nvi+Nvo+Nvu+NvA+NvE+NvI+NvO+NvU;


cout<<"numero de palavras "<< Nstring << endl;
cout<<"numero de linhas "  << Nlinhas  << endl;
cout<<"numero de vogais "  << Nvogais << endl;
cout<<"numero de espaços "  << Nspaces << endl;
cout<<"numero de artigos definidos "  << Ndef_art << endl;

 ler.close(); // se o programador omitir a chamada ao método close
 return 0; // o finalizador se encarrega de fechar o arquivo
 }
